{
	"action":[
		
	],
	"authority":[
		
	],
	"children":[
		{
			"action":[
				
			],
			"authority":[
				
			],
			"children":[
				
			],
			"code":"uuid",
			"control":"Hidden",
			"dataPermission":[
				
			],
			"isReference":false,
			"name":"uuid",
			"otherChildren":[
				
			],
			"property":[
				
			],
			"sort":1000
		}
	],
	"code":"manuscriptHistoryItemTree",
	"control":"Tree",
	"dataPermission":[
		
	],
	"isReference":false,
	"javaScript":"this.OnSelected = function (node) {

    console.log("OnSelected");
    var panel = this.Top("[container='FormPanel']");
    if (Framework.IsNullOrEmpty(panel)) return;
    var itemGrid = panel.DownForCode('manuscriptHistoryItemGrid');
    if (Framework.IsNullOrEmpty(itemGrid)) return;
    if (!itemGrid.Load) return;
    var params = [];

    params.push({param: 'auditworkProjectID', value: node.auditworkProjectID});
    params.push({param: 'fiscalYear', value: node.fiscalYear});
    params.push({param: 'parentStructureCode', value: node.code});
    params.push({param: 'splitForFiscalYear', value: node.splitForFiscalYear});
    params.push({param: 'modifyStatus', value: 0});
    params.push({param: 'formId', value: itemGrid.formid});
    itemGrid.params = JSON.stringify(params);
    itemGrid.MainContainer=panel;
    itemGrid.Load()

};

this.BeforeLoad = function () {
    var me = this;
    if (Framework.IsNullOrEmpty(me.params)) return false;
};

this.AfterLoad = function () {
    var me = this;
    console.log('AfterLoad 222');
    if (!me.LoadData) return;
    var t=this.Top().Opener.Top();

    var tree=t.DownForCode("manuscriptItemTree");
    var node1 =tree.GetSelected();
    if(node1 && node1.code)
    {
        var node = Framework.TreeDataFirst(me.LoadData, 'code', node1.code);
        if (node) {
            me.LocateNodeSelect(node);
        }else
        {
            me.isloadroot =true;
            me.AutoLoadRoot()
        }
    }
};",
	"name":"历史底稿树",
	"otherChildren":[
		
	],
	"property":[
		{
			"isHide":false,
			"name":"BaseCode",
			"value":"manuscriptHistoryItemTree"
		},
		{
			"isHide":false,
			"name":"Name",
			"value":"历史底稿树"
		},
		{
			"isHide":false,
			"name":"IsReadOnly",
			"value":false
		},
		{
			"isHide":false,
			"name":"Description"
		},
		{
			"isHide":false,
			"name":"FormId",
			"value":314497
		},
		{
			"isHide":false,
			"name":"OrderBy"
		},
		{
			"isHide":false,
			"name":"IsSqlForm",
			"value":false
		},
		{
			"isHide":false,
			"name":"JavaScript",
			"value":"var registerJavaScript = function () {

 

this.OnSelected = function (node) {

    console.log("OnSelected");
    var panel = this.Top("[container='FormPanel']");
    if (Framework.IsNullOrEmpty(panel)) return;
    var itemGrid = panel.DownForCode('manuscriptHistoryItemGrid');
    if (Framework.IsNullOrEmpty(itemGrid)) return;
    if (!itemGrid.Load) return;
    var params = [];

    params.push({param: 'auditworkProjectID', value: node.auditworkProjectID});
    params.push({param: 'fiscalYear', value: node.fiscalYear});
    params.push({param: 'parentStructureCode', value: node.code});
    params.push({param: 'splitForFiscalYear', value: node.splitForFiscalYear});
    params.push({param: 'modifyStatus', value: 0});
    params.push({param: 'formId', value: itemGrid.formid});
    itemGrid.params = JSON.stringify(params);
    itemGrid.MainContainer=panel;
    itemGrid.Load()

};

this.BeforeLoad = function () {
    var me = this;
    if (Framework.IsNullOrEmpty(me.params)) return false;
};

this.AfterLoad = function () {
    var me = this;
    console.log('AfterLoad 222');
    if (!me.LoadData) return;
    var t=this.Top().Opener.Top();

    var tree=t.DownForCode("manuscriptItemTree");
    var node1 =tree.GetSelected();
    if(node1 && node1.code)
    {
        var node = Framework.TreeDataFirst(me.LoadData, 'code', node1.code);
        if (node) {
            me.LocateNodeSelect(node);
        }else
        {
            me.isloadroot =true;
            me.AutoLoadRoot()
        }
    }
};

 

};"
		},
		{
			"isHide":false,
			"name":"queryUrl",
			"value":"/ManuscriptItem-gainManuscriptHistoryItemDTO.do"
		}
	],
	"sort":0
}
{"action":[],"authority":[],"children":[{"action":[],"authority":[],"children":[],"code":"uuid","control":"Hidden","dataPermission":[],"isReference":false,"name":"uuid","otherChildren":[],"property":[],"sort":1000}],"code":"manuscriptHistoryItemTree","control":"Tree","dataPermission":[],"isReference":false,"javaScript":"this.OnSelected&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;OnSelected&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;panel&nbsp;=&nbsp;this.Top(&quot;[container='FormPanel']&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(panel))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;itemGrid&nbsp;=&nbsp;panel.DownForCode('manuscriptHistoryItemGrid');\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(itemGrid))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!itemGrid.Load)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'auditworkProjectID',&nbsp;value:&nbsp;node.auditworkProjectID});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'fiscalYear',&nbsp;value:&nbsp;node.fiscalYear});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'parentStructureCode',&nbsp;value:&nbsp;node.code});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'splitForFiscalYear',&nbsp;value:&nbsp;node.splitForFiscalYear});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'modifyStatus',&nbsp;value:&nbsp;0});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'formId',&nbsp;value:&nbsp;itemGrid.formid});\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.params&nbsp;=&nbsp;JSON.stringify(params);\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.MainContainer=panel;\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.Load()\n\n};\n\nthis.BeforeLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(me.params))&nbsp;return&nbsp;false;\n};\n\nthis.AfterLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log('AfterLoad&nbsp;222');\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!me.LoadData)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;t=this.Top().Opener.Top();\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;tree=t.DownForCode(&quot;manuscriptItemTree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node1&nbsp;=tree.GetSelected();\n&nbsp;&nbsp;&nbsp;&nbsp;if(node1&nbsp;&&&nbsp;node1.code)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node&nbsp;=&nbsp;Framework.TreeDataFirst(me.LoadData,&nbsp;'code',&nbsp;node1.code);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.LocateNodeSelect(node);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.isloadroot&nbsp;=true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.AutoLoadRoot()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};","name":"历史底稿树","otherChildren":[],"property":[{"isHide":false,"name":"BaseCode","value":"manuscriptHistoryItemTree"},{"isHide":false,"name":"Name","value":"历史底稿树"},{"isHide":false,"name":"IsReadOnly","value":false},{"isHide":false,"name":"Description"},{"isHide":false,"name":"FormId","value":314497},{"isHide":false,"name":"OrderBy"},{"isHide":false,"name":"IsSqlForm","value":false},{"isHide":false,"name":"JavaScript","value":"var registerJavaScript = function () {\r\n \r\nthis.OnSelected&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;OnSelected&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;panel&nbsp;=&nbsp;this.Top(&quot;[container='FormPanel']&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(panel))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;itemGrid&nbsp;=&nbsp;panel.DownForCode('manuscriptHistoryItemGrid');\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(itemGrid))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!itemGrid.Load)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'auditworkProjectID',&nbsp;value:&nbsp;node.auditworkProjectID});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'fiscalYear',&nbsp;value:&nbsp;node.fiscalYear});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'parentStructureCode',&nbsp;value:&nbsp;node.code});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'splitForFiscalYear',&nbsp;value:&nbsp;node.splitForFiscalYear});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'modifyStatus',&nbsp;value:&nbsp;0});\n&nbsp;&nbsp;&nbsp;&nbsp;params.push({param:&nbsp;'formId',&nbsp;value:&nbsp;itemGrid.formid});\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.params&nbsp;=&nbsp;JSON.stringify(params);\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.MainContainer=panel;\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.Load()\n\n};\n\nthis.BeforeLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(me.params))&nbsp;return&nbsp;false;\n};\n\nthis.AfterLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log('AfterLoad&nbsp;222');\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!me.LoadData)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;t=this.Top().Opener.Top();\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;tree=t.DownForCode(&quot;manuscriptItemTree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node1&nbsp;=tree.GetSelected();\n&nbsp;&nbsp;&nbsp;&nbsp;if(node1&nbsp;&&&nbsp;node1.code)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node&nbsp;=&nbsp;Framework.TreeDataFirst(me.LoadData,&nbsp;'code',&nbsp;node1.code);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.LocateNodeSelect(node);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.isloadroot&nbsp;=true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.AutoLoadRoot()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};\r\n \r\n};"},{"isHide":false,"name":"queryUrl","value":"/ManuscriptItem-gainManuscriptHistoryItemDTO.do"}],"sort":0}
2020-04-17 16:34:03