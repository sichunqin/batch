{
	"action":[
		{
			"code":"Createdd",
			"name":"新增",
			"property":[
				{
					"isHide":false,
					"name":"AuthorityRemark",
					"value":"项目架构-新增"
				},
				{
					"isHide":false,
					"name":"IsAdd",
					"value":"true"
				},
				{
					"isHide":false,
					"name":"class",
					"value":"easyui-linkbutton l-btn l-btn-small l-btn-plain architectureAdd"
				},
				{
					"isHide":false,
					"name":"IsShowText",
					"value":"false"
				},
				{
					"isHide":false,
					"name":"ReferenceId",
					"value":17748
				},
				{
					"isHide":false,
					"name":"JavaScript",
					"value":"var registerJavaScript = function () {

 

this.BeforeHandler = function () {
    console.log("AddCom")
    var me = this;
    me.renderdialog = true;
    var model = me.TopForCode("projectManage");
    var tree = model.DownForCode("compositionCustomerTree")
    var treeSelectData = tree.GetSelected();
    if (Framework.IsNullOrEmpty(treeSelectData)) {
        Framework.Message("请至少选择一条数据");
        return false;
    }

    var customerType = model.DownForCode('projectFrame').DownForCode('customerType');
    var customerTypeValue = customerType.GetSubmitValue();
    if (Framework.IsNullOrEmpty(customerTypeValue) || customerTypeValue == 0) {
        Framework.Message("请完善并保存您选中的项目架构信息后再新增修改旗下子分公司!");
        return false;
    }

    var params = {}
    params.compostionCustomerId = treeSelectData.id;
    Framework.AjaxRequest(me, "CompositionCustomer-getIsCustomer-Query.do", 'get', params, true, function (result) {
    });
}

 

};"
				}
			],
			"sort":0
		},
		{
			"code":"Update",
			"name":"修改",
			"property":[
				{
					"isHide":false,
					"name":"AuthorityRemark",
					"value":"项目架构-修改"
				},
				{
					"isHide":false,
					"name":"class",
					"value":"easyui-linkbutton l-btn l-btn-small l-btn-plain architectureModify"
				},
				{
					"isHide":false,
					"name":"IsShowText",
					"value":"false"
				},
				{
					"isHide":false,
					"name":"ReferenceId",
					"value":17748
				},
				{
					"isHide":false,
					"name":"JavaScript",
					"value":"var registerJavaScript = function () {

 

this.BeforeHandler = function () {
    console.log("UpdataCom");
    var me = this;
    me.renderdialog = true;
    var model = me.TopForCode("projectManage");
    var tree = model.DownForCode("compositionCustomerTree");
    var treeSelectData = tree.GetSelected();

    if (Framework.IsNullOrEmpty(treeSelectData)) {
        Framework.Message("请至少选择一条数据");
        return false;
    }
    
    var customerType = model.DownForCode('projectFrame').DownForCode('customerType');
    var customerTypeValue = customerType.GetSubmitValue();
    if (Framework.IsNullOrEmpty(customerTypeValue) || customerTypeValue == 0) {
        Framework.Message("请完善并保存您选中的项目架构信息后再新增修改旗下子分公司!");
        return false;
    }

    if (Framework.IsNullOrEmpty(treeSelectData.parentId)) {
        Framework.Message("母公司不能修改")
        return false;
    }
}

 

};"
				}
			],
			"sort":1
		}
	],
	"authority":[
		
	],
	"children":[
		{
			"action":[
				
			],
			"authority":[
				
			],
			"children":[
				
			],
			"code":"uuid",
			"control":"Hidden",
			"dataPermission":[
				
			],
			"isReference":false,
			"name":"uuid",
			"otherChildren":[
				
			],
			"property":[
				
			],
			"sort":1000
		}
	],
	"code":"compositionCustomerTree",
	"control":"Tree",
	"dataPermission":[
		
	],
	"isReference":false,
	"javaScript":"this.OnBeforeSelect = function (node) {
    var me = this;
    if (me.IsTreeLoad) return;
    console.log("OnBeforeSelect");
    var model = me.TopForCode("projectFrame");
    var form = model.DownForCode("compositionCustomerPage");
    if (form && form.GetIsChange()) {
        Framework.Confirm("存在未保存数据，是否强制离开!", function () {
            var bs = me.OnBeforeSelect;
            me.OnBeforeSelect = null;
            me.SetNodeSelect(node);
            me.OnClick(node);
            node.IsEnforce = false;
            me.OnBeforeSelect = bs;
        });
        node.IsEnforce = true;
        return false;
    }
}

this.AfterLoad = function () {
    console.log("tree");
    var me = this;
    LocateNode(me);//定位节点
    var form = me.Top().DownForCode('projectTab').Down("[controltype='FormPanel']").First;
    var docState = form.DownForCode("docState").GetSubmitValue();
    var isMotifySubmit = form.DownForCode("isMotifySubmit").GetValue();//是否修改后进行提交
    if (docState > 10) {
        var apply = me.Top().DownForCode("apply").GetValue();
        var stateArray = [11, 30, 31, 32, 33, 34, 35];
        if (apply == 1 && stateArray.Contains(docState)) {
            LinkButton(me, false);
        } else if (docState == 11 && isMotifySubmit != 1) {
            LinkButton(me, false);
        } else if (docState == 11) {
            LinkButton(me, false);
        } else {
            LinkButton(me, true);
        }
    }
    if (docState == 100) {
        LinkButton(me, false);
    }
}

function LinkButton(me, result) {
    var LinkButtonArray = me.Up().Up().Down("[controltype='LinkButton']");
    for (var i = 0; i < LinkButtonArray.length; i++) {
        LinkButtonArray[i].SetVisible(result);
    }
}

function LocateNode(me) {
    if (!me.LoadData) return;
    var node = Framework.TreeDataFirst(me.LoadData, 'readOnly', false);
    if (node) me.LocateNodeSelect(node);
}

this.RenderNodeStyle = function (node) {//加载每一个节点都会调用
    if (!node.parentId) return;//业务要求，根节点不用设置前边样式
    var me = this;
    var startClass = node.companyRelationship == 10 ? "subsidiary" : "branch";
    me.SetNodeStartIco(node, startClass);
}",
	"name":"组成部分树",
	"otherChildren":[
		
	],
	"property":[
		{
			"isHide":false,
			"name":"BaseCode",
			"value":"compositionCustomerTree"
		},
		{
			"isHide":false,
			"name":"Name",
			"value":"组成部分树"
		},
		{
			"isHide":false,
			"name":"IsReadOnly",
			"value":false
		},
		{
			"isHide":false,
			"name":"Description"
		},
		{
			"isHide":false,
			"name":"FormId",
			"value":16991
		},
		{
			"isHide":false,
			"name":"OrderBy",
			"value":"level asc,CompanyRelationship asc,SortCode asc"
		},
		{
			"isHide":false,
			"name":"IsSqlForm",
			"value":false
		},
		{
			"isHide":false,
			"name":"JavaScript",
			"value":"var registerJavaScript = function () {

 

this.OnBeforeSelect = function (node) {
    var me = this;
    if (me.IsTreeLoad) return;
    console.log("OnBeforeSelect");
    var model = me.TopForCode("projectFrame");
    var form = model.DownForCode("compositionCustomerPage");
    if (form && form.GetIsChange()) {
        Framework.Confirm("存在未保存数据，是否强制离开!", function () {
            var bs = me.OnBeforeSelect;
            me.OnBeforeSelect = null;
            me.SetNodeSelect(node);
            me.OnClick(node);
            node.IsEnforce = false;
            me.OnBeforeSelect = bs;
        });
        node.IsEnforce = true;
        return false;
    }
}

this.AfterLoad = function () {
    console.log("tree");
    var me = this;
    LocateNode(me);//定位节点
    var form = me.Top().DownForCode('projectTab').Down("[controltype='FormPanel']").First;
    var docState = form.DownForCode("docState").GetSubmitValue();
    var isMotifySubmit = form.DownForCode("isMotifySubmit").GetValue();//是否修改后进行提交
    if (docState > 10) {
        var apply = me.Top().DownForCode("apply").GetValue();
        var stateArray = [11, 30, 31, 32, 33, 34, 35];
        if (apply == 1 && stateArray.Contains(docState)) {
            LinkButton(me, false);
        } else if (docState == 11 && isMotifySubmit != 1) {
            LinkButton(me, false);
        } else if (docState == 11) {
            LinkButton(me, false);
        } else {
            LinkButton(me, true);
        }
    }
    if (docState == 100) {
        LinkButton(me, false);
    }
}

function LinkButton(me, result) {
    var LinkButtonArray = me.Up().Up().Down("[controltype='LinkButton']");
    for (var i = 0; i < LinkButtonArray.length; i++) {
        LinkButtonArray[i].SetVisible(result);
    }
}

function LocateNode(me) {
    if (!me.LoadData) return;
    var node = Framework.TreeDataFirst(me.LoadData, 'readOnly', false);
    if (node) me.LocateNodeSelect(node);
}

this.RenderNodeStyle = function (node) {//加载每一个节点都会调用
    if (!node.parentId) return;//业务要求，根节点不用设置前边样式
    var me = this;
    var startClass = node.companyRelationship == 10 ? "subsidiary" : "branch";
    me.SetNodeStartIco(node, startClass);
}

 

};"
		},
		{
			"isHide":false,
			"name":"EntityType",
			"value":"CompositionCustomer"
		},
		{
			"isHide":false,
			"name":"IsLoadRoot",
			"value":"false"
		},
		{
			"isHide":false,
			"name":"queryUrl",
			"value":"CompositionCustomer-getCompositionCompetenceTreeDTO.do"
		},
		{
			"isHide":false,
			"name":"EnableNodeReadOnly",
			"value":"true"
		},
		{
			"isHide":false,
			"name":"IsDrag",
			"value":"true"
		}
	],
	"sort":0
}
{"action":[{"code":"Createdd","name":"新增","property":[{"isHide":false,"name":"AuthorityRemark","value":"项目架构-新增"},{"isHide":false,"name":"IsAdd","value":"true"},{"isHide":false,"name":"class","value":"easyui-linkbutton l-btn l-btn-small l-btn-plain architectureAdd"},{"isHide":false,"name":"IsShowText","value":"false"},{"isHide":false,"name":"ReferenceId","value":17748},{"isHide":false,"name":"JavaScript","value":"var registerJavaScript = function () {\r\n \r\nthis.BeforeHandler&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;AddCom&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;me.renderdialog&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;model&nbsp;=&nbsp;me.TopForCode(&quot;projectManage&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;tree&nbsp;=&nbsp;model.DownForCode(&quot;compositionCustomerTree&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;treeSelectData&nbsp;=&nbsp;tree.GetSelected();\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(treeSelectData))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Message(&quot;请至少选择一条数据&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;customerType&nbsp;=&nbsp;model.DownForCode('projectFrame').DownForCode('customerType');\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;customerTypeValue&nbsp;=&nbsp;customerType.GetSubmitValue();\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(customerTypeValue)&nbsp;||&nbsp;customerTypeValue&nbsp;==&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Message(&quot;请完善并保存您选中的项目架构信息后再新增修改旗下子分公司!&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;params.compostionCustomerId&nbsp;=&nbsp;treeSelectData.id;\n&nbsp;&nbsp;&nbsp;&nbsp;Framework.AjaxRequest(me,&nbsp;&quot;CompositionCustomer-getIsCustomer-Query.do&quot;,&nbsp;'get',&nbsp;params,&nbsp;true,&nbsp;function&nbsp;(result)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;});\n}\r\n \r\n};"}],"sort":0},{"code":"Update","name":"修改","property":[{"isHide":false,"name":"AuthorityRemark","value":"项目架构-修改"},{"isHide":false,"name":"class","value":"easyui-linkbutton l-btn l-btn-small l-btn-plain architectureModify"},{"isHide":false,"name":"IsShowText","value":"false"},{"isHide":false,"name":"ReferenceId","value":17748},{"isHide":false,"name":"JavaScript","value":"var registerJavaScript = function () {\r\n \r\nthis.BeforeHandler&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;UpdataCom&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;me.renderdialog&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;model&nbsp;=&nbsp;me.TopForCode(&quot;projectManage&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;tree&nbsp;=&nbsp;model.DownForCode(&quot;compositionCustomerTree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;treeSelectData&nbsp;=&nbsp;tree.GetSelected();\n\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(treeSelectData))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Message(&quot;请至少选择一条数据&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;customerType&nbsp;=&nbsp;model.DownForCode('projectFrame').DownForCode('customerType');\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;customerTypeValue&nbsp;=&nbsp;customerType.GetSubmitValue();\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(customerTypeValue)&nbsp;||&nbsp;customerTypeValue&nbsp;==&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Message(&quot;请完善并保存您选中的项目架构信息后再新增修改旗下子分公司!&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(treeSelectData.parentId))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Message(&quot;母公司不能修改&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\r\n \r\n};"}],"sort":1}],"authority":[],"children":[{"action":[],"authority":[],"children":[],"code":"uuid","control":"Hidden","dataPermission":[],"isReference":false,"name":"uuid","otherChildren":[],"property":[],"sort":1000}],"code":"compositionCustomerTree","control":"Tree","dataPermission":[],"isReference":false,"javaScript":"this.OnBeforeSelect&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(me.IsTreeLoad)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;OnBeforeSelect&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;model&nbsp;=&nbsp;me.TopForCode(&quot;projectFrame&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;form&nbsp;=&nbsp;model.DownForCode(&quot;compositionCustomerPage&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(form&nbsp;&&&nbsp;form.GetIsChange())&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Confirm(&quot;存在未保存数据，是否强制离开!&quot;,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;bs&nbsp;=&nbsp;me.OnBeforeSelect;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.OnBeforeSelect&nbsp;=&nbsp;null;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.SetNodeSelect(node);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.OnClick(node);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.IsEnforce&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.OnBeforeSelect&nbsp;=&nbsp;bs;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.IsEnforce&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nthis.AfterLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;tree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;LocateNode(me);//定位节点\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;form&nbsp;=&nbsp;me.Top().DownForCode('projectTab').Down(&quot;[controltype='FormPanel']&quot;).First;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;docState&nbsp;=&nbsp;form.DownForCode(&quot;docState&quot;).GetSubmitValue();\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isMotifySubmit&nbsp;=&nbsp;form.DownForCode(&quot;isMotifySubmit&quot;).GetValue();//是否修改后进行提交\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(docState&nbsp;&gt;&nbsp;10)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;apply&nbsp;=&nbsp;me.Top().DownForCode(&quot;apply&quot;).GetValue();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;stateArray&nbsp;=&nbsp;[11,&nbsp;30,&nbsp;31,&nbsp;32,&nbsp;33,&nbsp;34,&nbsp;35];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(apply&nbsp;==&nbsp;1&nbsp;&&&nbsp;stateArray.Contains(docState))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(docState&nbsp;==&nbsp;11&nbsp;&&&nbsp;isMotifySubmit&nbsp;!=&nbsp;1)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(docState&nbsp;==&nbsp;11)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(docState&nbsp;==&nbsp;100)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nfunction&nbsp;LinkButton(me,&nbsp;result)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;LinkButtonArray&nbsp;=&nbsp;me.Up().Up().Down(&quot;[controltype='LinkButton']&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;LinkButtonArray.length;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButtonArray[i].SetVisible(result);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nfunction&nbsp;LocateNode(me)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!me.LoadData)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node&nbsp;=&nbsp;Framework.TreeDataFirst(me.LoadData,&nbsp;'readOnly',&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node)&nbsp;me.LocateNodeSelect(node);\n}\n\nthis.RenderNodeStyle&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{//加载每一个节点都会调用\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!node.parentId)&nbsp;return;//业务要求，根节点不用设置前边样式\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;startClass&nbsp;=&nbsp;node.companyRelationship&nbsp;==&nbsp;10&nbsp;?&nbsp;&quot;subsidiary&quot;&nbsp;:&nbsp;&quot;branch&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;me.SetNodeStartIco(node,&nbsp;startClass);\n}","name":"组成部分树","otherChildren":[],"property":[{"isHide":false,"name":"BaseCode","value":"compositionCustomerTree"},{"isHide":false,"name":"Name","value":"组成部分树"},{"isHide":false,"name":"IsReadOnly","value":false},{"isHide":false,"name":"Description"},{"isHide":false,"name":"FormId","value":16991},{"isHide":false,"name":"OrderBy","value":"level asc,CompanyRelationship asc,SortCode asc"},{"isHide":false,"name":"IsSqlForm","value":false},{"isHide":false,"name":"JavaScript","value":"var registerJavaScript = function () {\r\n \r\nthis.OnBeforeSelect&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(me.IsTreeLoad)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;OnBeforeSelect&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;model&nbsp;=&nbsp;me.TopForCode(&quot;projectFrame&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;form&nbsp;=&nbsp;model.DownForCode(&quot;compositionCustomerPage&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(form&nbsp;&&&nbsp;form.GetIsChange())&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Framework.Confirm(&quot;存在未保存数据，是否强制离开!&quot;,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;bs&nbsp;=&nbsp;me.OnBeforeSelect;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.OnBeforeSelect&nbsp;=&nbsp;null;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.SetNodeSelect(node);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.OnClick(node);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.IsEnforce&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.OnBeforeSelect&nbsp;=&nbsp;bs;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.IsEnforce&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nthis.AfterLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;tree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;LocateNode(me);//定位节点\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;form&nbsp;=&nbsp;me.Top().DownForCode('projectTab').Down(&quot;[controltype='FormPanel']&quot;).First;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;docState&nbsp;=&nbsp;form.DownForCode(&quot;docState&quot;).GetSubmitValue();\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isMotifySubmit&nbsp;=&nbsp;form.DownForCode(&quot;isMotifySubmit&quot;).GetValue();//是否修改后进行提交\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(docState&nbsp;&gt;&nbsp;10)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;apply&nbsp;=&nbsp;me.Top().DownForCode(&quot;apply&quot;).GetValue();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;stateArray&nbsp;=&nbsp;[11,&nbsp;30,&nbsp;31,&nbsp;32,&nbsp;33,&nbsp;34,&nbsp;35];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(apply&nbsp;==&nbsp;1&nbsp;&&&nbsp;stateArray.Contains(docState))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(docState&nbsp;==&nbsp;11&nbsp;&&&nbsp;isMotifySubmit&nbsp;!=&nbsp;1)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(docState&nbsp;==&nbsp;11)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(docState&nbsp;==&nbsp;100)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButton(me,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nfunction&nbsp;LinkButton(me,&nbsp;result)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;LinkButtonArray&nbsp;=&nbsp;me.Up().Up().Down(&quot;[controltype='LinkButton']&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;LinkButtonArray.length;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkButtonArray[i].SetVisible(result);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nfunction&nbsp;LocateNode(me)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!me.LoadData)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node&nbsp;=&nbsp;Framework.TreeDataFirst(me.LoadData,&nbsp;'readOnly',&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node)&nbsp;me.LocateNodeSelect(node);\n}\n\nthis.RenderNodeStyle&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{//加载每一个节点都会调用\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!node.parentId)&nbsp;return;//业务要求，根节点不用设置前边样式\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;startClass&nbsp;=&nbsp;node.companyRelationship&nbsp;==&nbsp;10&nbsp;?&nbsp;&quot;subsidiary&quot;&nbsp;:&nbsp;&quot;branch&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;me.SetNodeStartIco(node,&nbsp;startClass);\n}\r\n \r\n};"},{"isHide":false,"name":"EntityType","value":"CompositionCustomer"},{"isHide":false,"name":"IsLoadRoot","value":"false"},{"isHide":false,"name":"queryUrl","value":"CompositionCustomer-getCompositionCompetenceTreeDTO.do"},{"isHide":false,"name":"EnableNodeReadOnly","value":"true"},{"isHide":false,"name":"IsDrag","value":"true"}],"sort":0}
2020-04-23 11:54:11