{
	"action":[
		
	],
	"authority":[
		
	],
	"children":[
		{
			"action":[
				
			],
			"authority":[
				
			],
			"children":[
				
			],
			"code":"uuid",
			"control":"Hidden",
			"dataPermission":[
				
			],
			"isReference":false,
			"name":"uuid",
			"otherChildren":[
				
			],
			"property":[
				
			],
			"sort":1000
		}
	],
	"code":"projectTree",
	"control":"Tree",
	"dataPermission":[
		
	],
	"isReference":false,
	"javaScript":"this.OnSelected = function (node) {
    console.log("1");
    var panel = this.Top("[container='Panel']");
    if (Framework.IsNullOrEmpty(panel)) return;
    var itemGrid = panel.DownForCode("reports");
    if (Framework.IsNullOrEmpty(itemGrid)) return;
    var params = {
        param: 'compositionCustomerId',
        value: node.id
    };
    itemGrid.MainContainer = this;
    itemGrid.params = JSON.stringify(params);
    if (itemGrid.SetBusinessTitle) itemGrid.SetBusinessTitle(node.text);
    if (itemGrid.Load) itemGrid.Load();
};

this.AfterLoad = function () {
    console.log("tree");
    var me = this;
    LocateNode(me);//定位节点
}


function LocateNode(me) {
    if (!me.LoadData) return;
    var node = Framework.TreeDataFirst(me.LoadData, 'readOnly', false);
    if (node) me.LocateNodeSelect(node);
}
this.RenderNodeStyle = function (node) {//加载每一个节点都会调用
     console.log("颜色定位");
    if (!node.parentId) return;//业务要求，根节点不用设置前边样式
    var me = this;
    var startClass = node.companyRelationship == 10 ? "subsidiary" : "branch";
    me.SetNodeStartIco(node, startClass);
}
",
	"name":"报告项目树",
	"otherChildren":[
		
	],
	"property":[
		{
			"isHide":false,
			"name":"BaseCode",
			"value":"projectTree"
		},
		{
			"isHide":false,
			"name":"Name",
			"value":"报告项目树"
		},
		{
			"isHide":false,
			"name":"IsReadOnly",
			"value":false
		},
		{
			"isHide":false,
			"name":"Description"
		},
		{
			"isHide":false,
			"name":"FormId",
			"value":30150
		},
		{
			"isHide":false,
			"name":"OrderBy",
			"value":"Code"
		},
		{
			"isHide":false,
			"name":"IsSqlForm",
			"value":false
		},
		{
			"isHide":false,
			"name":"JavaScript",
			"value":"var registerJavaScript = function () {

 

this.OnSelected = function (node) {
    console.log("1");
    var panel = this.Top("[container='Panel']");
    if (Framework.IsNullOrEmpty(panel)) return;
    var itemGrid = panel.DownForCode("reports");
    if (Framework.IsNullOrEmpty(itemGrid)) return;
    var params = {
        param: 'compositionCustomerId',
        value: node.id
    };
    itemGrid.MainContainer = this;
    itemGrid.params = JSON.stringify(params);
    if (itemGrid.SetBusinessTitle) itemGrid.SetBusinessTitle(node.text);
    if (itemGrid.Load) itemGrid.Load();
};

this.AfterLoad = function () {
    console.log("tree");
    var me = this;
    LocateNode(me);//定位节点
}


function LocateNode(me) {
    if (!me.LoadData) return;
    var node = Framework.TreeDataFirst(me.LoadData, 'readOnly', false);
    if (node) me.LocateNodeSelect(node);
}
this.RenderNodeStyle = function (node) {//加载每一个节点都会调用
     console.log("颜色定位");
    if (!node.parentId) return;//业务要求，根节点不用设置前边样式
    var me = this;
    var startClass = node.companyRelationship == 10 ? "subsidiary" : "branch";
    me.SetNodeStartIco(node, startClass);
}


 

};"
		},
		{
			"isHide":false,
			"name":"EntityType",
			"value":"CompositionCustomer"
		},
		{
			"isHide":false,
			"name":"IsLoadRoot",
			"value":"false"
		},
		{
			"isHide":false,
			"name":"queryurl",
			"value":"Report-getCompositionCustomerTree.do"
		},
		{
			"isHide":false,
			"name":"EnableNodeReadOnly",
			"value":"true"
		}
	],
	"sort":0
}
{"action":[],"authority":[],"children":[{"action":[],"authority":[],"children":[],"code":"uuid","control":"Hidden","dataPermission":[],"isReference":false,"name":"uuid","otherChildren":[],"property":[],"sort":1000}],"code":"projectTree","control":"Tree","dataPermission":[],"isReference":false,"javaScript":"this.OnSelected&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;1&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;panel&nbsp;=&nbsp;this.Top(&quot;[container='Panel']&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(panel))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;itemGrid&nbsp;=&nbsp;panel.DownForCode(&quot;reports&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(itemGrid))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param:&nbsp;'compositionCustomerId',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;node.id\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.MainContainer&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.params&nbsp;=&nbsp;JSON.stringify(params);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(itemGrid.SetBusinessTitle)&nbsp;itemGrid.SetBusinessTitle(node.text);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(itemGrid.Load)&nbsp;itemGrid.Load();\n};\n\nthis.AfterLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;tree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;LocateNode(me);//定位节点\n}\n\n\nfunction&nbsp;LocateNode(me)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!me.LoadData)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node&nbsp;=&nbsp;Framework.TreeDataFirst(me.LoadData,&nbsp;'readOnly',&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node)&nbsp;me.LocateNodeSelect(node);\n}\nthis.RenderNodeStyle&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{//加载每一个节点都会调用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;颜色定位&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!node.parentId)&nbsp;return;//业务要求，根节点不用设置前边样式\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;startClass&nbsp;=&nbsp;node.companyRelationship&nbsp;==&nbsp;10&nbsp;?&nbsp;&quot;subsidiary&quot;&nbsp;:&nbsp;&quot;branch&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;me.SetNodeStartIco(node,&nbsp;startClass);\n}\n","name":"报告项目树","otherChildren":[],"property":[{"isHide":false,"name":"BaseCode","value":"projectTree"},{"isHide":false,"name":"Name","value":"报告项目树"},{"isHide":false,"name":"IsReadOnly","value":false},{"isHide":false,"name":"Description"},{"isHide":false,"name":"FormId","value":30150},{"isHide":false,"name":"OrderBy","value":"Code"},{"isHide":false,"name":"IsSqlForm","value":false},{"isHide":false,"name":"JavaScript","value":"var registerJavaScript = function () {\r\n \r\nthis.OnSelected&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;1&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;panel&nbsp;=&nbsp;this.Top(&quot;[container='Panel']&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(panel))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;itemGrid&nbsp;=&nbsp;panel.DownForCode(&quot;reports&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Framework.IsNullOrEmpty(itemGrid))&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param:&nbsp;'compositionCustomerId',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;node.id\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.MainContainer&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;itemGrid.params&nbsp;=&nbsp;JSON.stringify(params);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(itemGrid.SetBusinessTitle)&nbsp;itemGrid.SetBusinessTitle(node.text);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(itemGrid.Load)&nbsp;itemGrid.Load();\n};\n\nthis.AfterLoad&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;tree&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;LocateNode(me);//定位节点\n}\n\n\nfunction&nbsp;LocateNode(me)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!me.LoadData)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node&nbsp;=&nbsp;Framework.TreeDataFirst(me.LoadData,&nbsp;'readOnly',&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node)&nbsp;me.LocateNodeSelect(node);\n}\nthis.RenderNodeStyle&nbsp;=&nbsp;function&nbsp;(node)&nbsp;{//加载每一个节点都会调用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;颜色定位&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!node.parentId)&nbsp;return;//业务要求，根节点不用设置前边样式\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;me&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;startClass&nbsp;=&nbsp;node.companyRelationship&nbsp;==&nbsp;10&nbsp;?&nbsp;&quot;subsidiary&quot;&nbsp;:&nbsp;&quot;branch&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;me.SetNodeStartIco(node,&nbsp;startClass);\n}\n\r\n \r\n};"},{"isHide":false,"name":"EntityType","value":"CompositionCustomer"},{"isHide":false,"name":"IsLoadRoot","value":"false"},{"isHide":false,"name":"queryurl","value":"Report-getCompositionCustomerTree.do"},{"isHide":false,"name":"EnableNodeReadOnly","value":"true"}],"sort":0}
2020-03-09 16:25:30